name: 🧪 WeKare Shared Package CI/CD

on:
  # Manual trigger - team can run this through GitHub Actions tab
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test Level'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - coverage
      build_package:
        description: 'Build Package'
        required: true
        default: true
        type: boolean
  
  # Also trigger on push to main and PRs for automated validation
  push:
    branches: [ main, develop ]
    paths:
      - 'shared/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/shared-package-ci.yml'
  
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'shared/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/shared-package-ci.yml'

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.8.3'

jobs:
  test:
    name: 🧪 Test Shared Package
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: 🔍 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: 📚 Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: 🔧 Install package
      run: poetry install --no-interaction
    
    - name: 🧪 Run tests (Quick)
      if: ${{ github.event.inputs.test_level == 'quick' || github.event_name != 'workflow_dispatch' }}
      run: |
        poetry run python -m pytest tests/ -v --tb=short --maxfail=5
    
    - name: 🧪 Run tests (Full)
      if: ${{ github.event.inputs.test_level == 'full' }}
      run: |
        poetry run python -m pytest tests/ -v --tb=short
    
    - name: 📊 Run tests with coverage
      if: ${{ github.event.inputs.test_level == 'coverage' }}
      run: |
        poetry run python -m pytest tests/ -v --tb=short --cov=shared --cov-report=xml --cov-report=html
    
    - name: 📈 Upload coverage to Codecov
      if: ${{ github.event.inputs.test_level == 'coverage' }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: 📋 Test Import
      run: |
        poetry run python -c "
        print('🔍 Testing package imports...')
        from shared.auth.api_keys import APIKeyManager
        from shared.config.base_config import SharedInfrastructureConfig
        from shared.database.connection import DatabaseConnection
        from shared.database.repository import BaseRepository
        print('✅ All imports successful!')
        "

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event.inputs.build_package == 'true' || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: 🔧 Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: 🏗️ Build package
      run: |
        echo "🔨 Building WeKare Shared Package..."
        poetry build
        echo "📦 Package built successfully!"
        ls -la dist/
    
    - name: 📋 Package info
      run: |
        echo "📋 Package Information:"
        echo "📦 Package: wekare-shared"
        echo "🏷️ Version: $(poetry version --short)"
        echo "📝 Description: WeKare Shared Infrastructure Components"
        echo "📊 Dependencies:"
        poetry show --tree
    
    - name: 🔍 Validate package
      run: |
        poetry run python -m pip install dist/*.whl
        echo "✅ Package validation successful!"
    
    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wekare-shared-package-${{ github.sha }}
        path: dist/
        retention-days: 30

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: 🔧 Install dependencies
      run: poetry install --no-interaction --no-root
    
    - name: 🔒 Run safety check
      run: |
        poetry run python -m pip install safety
        poetry run safety check
        echo "✅ Security scan completed!"
    
    - name: 🔍 Run bandit security check
      run: |
        poetry run python -m pip install bandit
        poetry run bandit -r shared/ -f json -o bandit-report.json || true
        echo "✅ Bandit security scan completed!"
    
    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
        retention-days: 30

  status:
    name: 📊 Update Status
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always()
    
    steps:
    - name: 📊 Set status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "🎉 All jobs completed successfully!"
          echo "✅ WeKare Shared Package is ready for distribution!"
        else
          echo "❌ Some jobs failed. Please check the logs."
          exit 1
        fi 